AC_INIT(README)
AC_CANONICAL_SYSTEM
AC_PROG_LIBTOOL
AM_INIT_AUTOMAKE(gsf-sharp, 0.2)
AM_MAINTAINER_MODE

dnl Defines CC to avoid warnings
AC_PROG_INSTALL

AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
if test "x$PKG_CONFIG" = "xno"; then
	AC_MSG_ERROR(['pkg-config' is not in your PATH.])
fi

PKG_CHECK_MODULES(MONO_DEPENDENCY, mono >= 1.0, has_mono=true, has_mono=false)
PKG_CHECK_MODULES(MONO_DEPENDENCY, mint >= 1.0, has_mint=true, has_mint=false)

if test "x$has_mono" = "xtrue"; then
	if test `uname -s` = "Darwin"; then
		AC_PATH_PROG(RUNTIME, mono, no)
		AC_PATH_PROG(CSC, mcs, no)
		LIB_PREFIX=
		LIB_SUFFIX=.dylib
	else
		AC_PATH_PROG(RUNTIME, mono, no)
		AC_PATH_PROG(CSC, mcs, no)
		LIB_PREFIX=.so
		LIB_SUFFIX=
	fi
else
	if test "x$has_mint" = "xtrue"; then
		AC_PATH_PROG(RUNTIME, mint, no)
		AC_PATH_PROG(CSC, mcs, no)
		LIB_PREFIX=.so
		LIB_SUFFIX=
	else
		AC_PATH_PROG(CSC, csc.exe, no)
		if test x$CSC = "xno"; then
			AC_MSG_ERROR([You need to install either mono or .Net])
		else
			RUNTIME=
			LIB_PREFIX=
			LIB_SUFFIX=.dylib
		fi
	fi
fi

CS="C#"
if test "x$CSC" = "xno" ; then
    AC_MSG_ERROR([No $CS compiler found])
fi

AC_PATH_PROG(GACUTIL, gacutil, no)
if test "x$GACUTIL" = "xno" ; then
	AC_MSG_ERROR([No gacutil tool found])
fi

GACUTIL_FLAGS='/package gtk-sharp /gacdir $(libdir) /root $(DESTDIR)$(libdir)'
                                     
AC_SUBST(RUNTIME)
AC_SUBST(CSC)
AC_SUBST(GACUTIL)
AC_SUBST(GACUTIL_FLAGS)
AC_SUBST(LIB_PREFIX)
AC_SUBST(LIB_SUFFIX)

PKG_CHECK_MODULES(GTK_SHARP, gtk-sharp >= 0.98)
gtksharp_prefix=`pkg-config --variable=prefix gtk-sharp`
AC_SUBST(GTK_SHARP_CFLAGS)
AC_SUBST(GTK_SHARP_LIBS)
AC_SUBST(gtksharp_prefix)

PKG_CHECK_MODULES(GSF, libgsf-1 >= 1.11.0 libgsf-gnome-1 >= 1.11.0)
AC_SUBST(GSF_CFLAGS)
AC_SUBST(GSF_LIBS)
gsf_prefix=`pkg-config --variable=prefix libgsf-1`
AC_SUBST(gsf_prefix)

AC_PATH_PROG(GAPI_FIXUP, gapi-fixup, no)
if test "x$GAPI_FIXUP" = "xno"; then
	AC_MSG_CHECKING(for gapi-fixup.exe)
	GAPI_FIXUP=`which gapi-fixup.exe 2> /dev/null`
	if test "x$GAPI_FIXUP" = "xno" ; then
		AC_MSG_ERROR(['gapi_fixup'/'gapi-fixup.exe' not found.])
	fi
	AC_MSG_RESULT($GAPI_FIXUP)
	GAPI_FIXUP="$MONO $GAPI_FIXUP"
fi
AC_SUBST(GAPI_FIXUP)

AC_PATH_PROG(GAPI_CODEGEN, gapi-codegen, no)
if test "x$GAPI_CODEGEN" = "xno"; then
	AC_MSG_CHECKING(for gapi_codegen.exe)
	GAPI_CODEGEN=`which gapi_codegen.exe 2> /dev/null`
	if test "x$GAPI_CODEGEN" = "xno" ; then
		AC_MSG_ERROR(['gapi-codegen'/'gapi_codegen.exe' not found.])
	fi
	AC_MSG_RESULT([$GAPI_CODEGEN])
	GAPI_CODEGEN="$MONO $GAPI_CODEGEN"
fi
AC_SUBST(GAPI_CODEGEN)

MONODOC_REQUIRED_VERSION=1.0
PKG_CHECK_MODULES(MONODOC_DEPENDENCY, monodoc >= $MONODOC_REQUIRED_VERSION, enable_monodoc=yes, enable_monodoc=no)
                                                                                
if test "x$enable_monodoc" = "xyes"; then 
    AC_PATH_PROG(MONODOC, monodoc, no)
    if test "x$MONODOC" = "xno"; then
       enable_monodoc=no
    fi
else
    MONODOC=
fi
AC_SUBST(MONODOC)

API_VERSION="0.0.0.2"
AC_SUBST(API_VERSION)

AM_CONDITIONAL(ENABLE_MONODOC, test "x$enable_monodoc" = "xyes")

AC_OUTPUT([
makefile
gsf/AssemblyInfo.cs
gsf/gsf-sharp.dll.config
gsf/makefile
gsf-sharp.pc
])
